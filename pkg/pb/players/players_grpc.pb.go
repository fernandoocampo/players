// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/pb/players/players.proto

package players

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlayerHandler_CreatePlayer_FullMethodName  = "/players.PlayerHandler/CreatePlayer"
	PlayerHandler_UpdatePlayer_FullMethodName  = "/players.PlayerHandler/UpdatePlayer"
	PlayerHandler_DeletePlayer_FullMethodName  = "/players.PlayerHandler/DeletePlayer"
	PlayerHandler_SearchPlayers_FullMethodName = "/players.PlayerHandler/SearchPlayers"
)

// PlayerHandlerClient is the client API for PlayerHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// service to handle players.
type PlayerHandlerClient interface {
	// Crete player
	CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*CreatePlayerReply, error)
	// Update player
	UpdatePlayer(ctx context.Context, in *UpdatePlayerRequest, opts ...grpc.CallOption) (*UpdatePlayerReply, error)
	// Delete Player
	DeletePlayer(ctx context.Context, in *DeletePlayerRequest, opts ...grpc.CallOption) (*DeletePlayerReply, error)
	// Search players
	SearchPlayers(ctx context.Context, in *SearchPlayersRequest, opts ...grpc.CallOption) (*SearchPlayersReply, error)
}

type playerHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerHandlerClient(cc grpc.ClientConnInterface) PlayerHandlerClient {
	return &playerHandlerClient{cc}
}

func (c *playerHandlerClient) CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*CreatePlayerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlayerReply)
	err := c.cc.Invoke(ctx, PlayerHandler_CreatePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerHandlerClient) UpdatePlayer(ctx context.Context, in *UpdatePlayerRequest, opts ...grpc.CallOption) (*UpdatePlayerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlayerReply)
	err := c.cc.Invoke(ctx, PlayerHandler_UpdatePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerHandlerClient) DeletePlayer(ctx context.Context, in *DeletePlayerRequest, opts ...grpc.CallOption) (*DeletePlayerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePlayerReply)
	err := c.cc.Invoke(ctx, PlayerHandler_DeletePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerHandlerClient) SearchPlayers(ctx context.Context, in *SearchPlayersRequest, opts ...grpc.CallOption) (*SearchPlayersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPlayersReply)
	err := c.cc.Invoke(ctx, PlayerHandler_SearchPlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerHandlerServer is the server API for PlayerHandler service.
// All implementations must embed UnimplementedPlayerHandlerServer
// for forward compatibility.
//
// service to handle players.
type PlayerHandlerServer interface {
	// Crete player
	CreatePlayer(context.Context, *CreatePlayerRequest) (*CreatePlayerReply, error)
	// Update player
	UpdatePlayer(context.Context, *UpdatePlayerRequest) (*UpdatePlayerReply, error)
	// Delete Player
	DeletePlayer(context.Context, *DeletePlayerRequest) (*DeletePlayerReply, error)
	// Search players
	SearchPlayers(context.Context, *SearchPlayersRequest) (*SearchPlayersReply, error)
	mustEmbedUnimplementedPlayerHandlerServer()
}

// UnimplementedPlayerHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerHandlerServer struct{}

func (UnimplementedPlayerHandlerServer) CreatePlayer(context.Context, *CreatePlayerRequest) (*CreatePlayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (UnimplementedPlayerHandlerServer) UpdatePlayer(context.Context, *UpdatePlayerRequest) (*UpdatePlayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayer not implemented")
}
func (UnimplementedPlayerHandlerServer) DeletePlayer(context.Context, *DeletePlayerRequest) (*DeletePlayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayer not implemented")
}
func (UnimplementedPlayerHandlerServer) SearchPlayers(context.Context, *SearchPlayersRequest) (*SearchPlayersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPlayers not implemented")
}
func (UnimplementedPlayerHandlerServer) mustEmbedUnimplementedPlayerHandlerServer() {}
func (UnimplementedPlayerHandlerServer) testEmbeddedByValue()                       {}

// UnsafePlayerHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerHandlerServer will
// result in compilation errors.
type UnsafePlayerHandlerServer interface {
	mustEmbedUnimplementedPlayerHandlerServer()
}

func RegisterPlayerHandlerServer(s grpc.ServiceRegistrar, srv PlayerHandlerServer) {
	// If the following call pancis, it indicates UnimplementedPlayerHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlayerHandler_ServiceDesc, srv)
}

func _PlayerHandler_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerHandlerServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerHandler_CreatePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerHandlerServer).CreatePlayer(ctx, req.(*CreatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerHandler_UpdatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerHandlerServer).UpdatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerHandler_UpdatePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerHandlerServer).UpdatePlayer(ctx, req.(*UpdatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerHandler_DeletePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerHandlerServer).DeletePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerHandler_DeletePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerHandlerServer).DeletePlayer(ctx, req.(*DeletePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerHandler_SearchPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerHandlerServer).SearchPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerHandler_SearchPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerHandlerServer).SearchPlayers(ctx, req.(*SearchPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerHandler_ServiceDesc is the grpc.ServiceDesc for PlayerHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "players.PlayerHandler",
	HandlerType: (*PlayerHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlayer",
			Handler:    _PlayerHandler_CreatePlayer_Handler,
		},
		{
			MethodName: "UpdatePlayer",
			Handler:    _PlayerHandler_UpdatePlayer_Handler,
		},
		{
			MethodName: "DeletePlayer",
			Handler:    _PlayerHandler_DeletePlayer_Handler,
		},
		{
			MethodName: "SearchPlayers",
			Handler:    _PlayerHandler_SearchPlayers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/players/players.proto",
}
